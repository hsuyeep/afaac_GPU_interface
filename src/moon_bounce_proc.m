% Script to calibrate gpu correlated visibilities available as a .mat file 
% generated by gpu2mat.py. This works on the raw output of the GPU correlator
% or a selected subset created by splitgpuvis.py. Specifically carry out
% moon bounce related processing.
% pep/30Mar15

clear all; close all;
% For moon position etc.
addpath ~/WORK/Matlab/ofek_matlab/

% Data locations.
load ('poslocal_outer.mat', 'poslocal', 'posITRF');
load '/dop312_0/prasad/moon-bounce/23Feb15/tx_falling_edge/1424705670-1424705684_1424705671-1424705683.mat'
% dwg_off = 9; % Index at which the Dwing. telescope turns off in this dataset.
dwg_l = 0;  dwg_m = 0;

% load '/dop312_0/prasad/moon-bounce/23Feb15/tx_falling_edge/1424705965-1424705980_1424705966-1424705979.mat'
% dwg_off = 9 
dwg_l = 0;  dwg_m = 0;

% load '/dop312_0/prasad/moon-bounce/23Feb15/tx_falling_edge/1424706250-1424706270_1424706250-1424706269.mat'
dwg_l = [0.9335, 0.9061, 0.9335, 0.9217]; % In dec. order of apparent flux
dwg_m = [0.3033, 0.3386, 0.3346, 0.3659];
dwg_off = 9;
col_rng = [0 30];


flagant = [35, 98, 140, 149, 179, 260];
goodant = setdiff ([1:288], flagant);

freq = 53999992;
uloc = meshgrid (poslocal(:,1)) - ... 
				meshgrid (poslocal (:,1)).';
vloc = meshgrid (poslocal(:,2)) - ... 
				meshgrid (poslocal (:,2)).';
[uloc_flag, vloc_flag] = gen_flagged_uvloc (uloc, vloc, flagant); 

gparm.type = 'pillbox';
gparm.lim = 0;
gparm.duv = 0.5; 
gparm.Nuv = 500;
gparm.uvpad = 512; 
gparm.fft = 1;

fprintf (1, 'Found %d timeslices.\n', size(acm, 1));
fprintf (2, '###NOTE: Only channel 63 contains the moon signal!!\n');

% Extract out only chan 63 as psd acms.
[acm_t, tobs_mjdsec, fobs, map, l] = gengpuimg(acm, tobs, freq, 63, [], [], [], 1, 0);


%%%%%%%%%% eig processing: Can operate on the raw ACMs as this doesn't require calibration
clf;
tmp_acm = zeros (288);
mask = triu(ones (288));
diff_acm = zeros (4,288,288);
for ind = 1:size (acm,1)
    chan_diff = squeeze(acm (ind, :, 63, :, :)); % - acm(ind, :, 62, :, :));
    tmp_acm = zeros (288);
     tmp_acm  (mask == 1) = complex (chan_diff(:,1,1), chan_diff(:,1,2));
     tmp_acm = tmp_acm + tmp_acm';     
          
%     for pol = 1:4
%         tmp_acm  (mask == 1) = complex (chan_diff(:,pol,1), chan_diff(:,pol,2));
%         tmp_acm = tmp_acm + tmp_acm';
%         diff_acm (pol, :,:) = tmp_acm;        
%     end;
    [v,d] = eig (squeeze(tmp_acm)); %% Only XX pol for now.
    pl = diag(d); % Vector to plot
    
    clf;
    subplot (121);
    cla;
    plot (10*log10(pl(250:end)), '.');
    % plot (10*log10(pl(pl>0)), '.-'); 
    xlabel ('Dimension'); ylabel ('Eigenvalue'); title (sprintf ('Timeslice %d\n', ind));
    
    subplot (122);
    cla;
    imagesc (squeeze(abs(tmp_acm - diag(diag(tmp_acm)))));  colorbar;
    % imagesc (squeeze(abs(diff_acm(1,:,:))));  colorbar;
    pause;
end;
    


for ind = 1:size (acm, 1)

    if (ind < dwg_off)
        % Convert dwing. dish location to radec for inclusion in the skymodel
        [dwg_ra, dwg_dec] = lmtoradec (dwg_l, dwg_m, tobs_mjdsec(ind)./86400+2400000.5, 6.869837540, 52.915122495);
    
        % X-pol processing, calibrate on RFI
        sol_x_rfi(ind) = pelican_sunAteamsub(squeeze(acm_t(ind,:,:,1)) , tobs_mjdsec(ind), freq, eye(288), flagant, 0, 1, [], [], 'poslocal_outer.mat', diag(dwg_ra), diag(dwg_dec));	
        acc_norfi = zeros (288, 288);
        acc_norfi (goodant, goodant) = sol_x_rfi(ind).calvis + sol_x_rfi(ind).sigman;
        sol_x(ind) = pelican_sunAteamsub(acc_norfi, tobs_mjdsec(ind), freq, eye(288), flagant, 0, 1, [], [], 'poslocal_outer.mat', [],[]);
        
        % Y-pol processing, calibrate on RFI
        sol_y_rfi(ind) = pelican_sunAteamsub(squeeze(acm_t(ind,:,:,4)) , tobs_mjdsec(ind), freq, eye(288), flagant, 0, 1, [], [], 'poslocal_outer.mat',diag(dwg_ra), diag(dwg_dec));	
        acc_norfi = zeros (288, 288);
        acc_norfi (goodant, goodant) = sol_y_rfi(ind).calvis + sol_y_rfi(ind).sigman;        
        sol_y(ind) = pelican_sunAteamsub(acc_norfi, tobs_mjdsec(ind), freq, eye(288), flagant, 0, 1, [], [], 'poslocal_outer.mat', [],[]);
        
    else
        % X-pol processing
        sol_x(ind) = pelican_sunAteamsub(squeeze(acm_t(ind,:,:,1)) , tobs_mjdsec(ind), freq, eye(288), flagant, 0, 1, [], [], 'poslocal_outer.mat', [], []);	
        sol_x_rfi(ind) = sol_x_rfi(dwg_off-1);

        % Y-pol processing
        sol_y(ind) = pelican_sunAteamsub(squeeze(acm_t(ind,:,:,4)) , tobs_mjdsec(ind), freq, eye(288), flagant, 0, 1, [], [], 'poslocal_outer.mat', [], []);	
        sol_y_rfi(ind) = sol_y_rfi(dwg_off-1);
    end;
    
    % Independently image each timeslice	
    [map_rfi(ind, :, :, 1), calmap, calvis, l, m] = ... 
					fft_imager_sjw_radec (sol_x_rfi(ind).calvis, uloc_flag(:), vloc_flag(:), ...
										gparm, [], [], tobs_mjdsec(ind), fobs, 0);
	% Independently image each timeslice
	[map_rfi(ind, :, :, 4), calmap, calvis, l, m] = ... 
					fft_imager_sjw_radec (sol_y_rfi(ind).calvis, uloc_flag(:), vloc_flag(:), ...
										gparm, [], [], tobs_mjdsec(ind), fobs, 0);
	[map_sky(ind, :, :, 1), calmap, calvis, l, m] = ... 
					fft_imager_sjw_radec (sol_x(ind).calvis, uloc_flag(:), vloc_flag(:), ...
										gparm, [], [], tobs_mjdsec(ind), fobs, 0);
	% Independently image each timeslice
	[map_sky(ind, :, :, 4), calmap, calvis, l, m] = ... 
					fft_imager_sjw_radec (sol_y(ind).calvis, uloc_flag(:), vloc_flag(:), ...
										gparm, [], [], tobs_mjdsec(ind), fobs, 0);
end;

% Now show plots 
for ind = 1:size (acm,1)
    cla;
	subplot (231);
    imagesc (l, m, abs(squeeze(map(ind,:,:,1)))); colorbar;
    set (gca, 'YDir', 'Normal'); % To match orientation with station images
    set (gca, 'XDir', 'Reverse'); % To match orientation with station images
    ylabel('South $\leftarrow$ m $\rightarrow$ North', 'interpreter', 'latex');
    xlabel('East $\leftarrow$ l $\rightarrow$ West', 'interpreter', 'latex');
    
    subplot (232);
	imagesc (l, m, abs(squeeze(map_rfi(ind,:,:,1)))); colorbar; caxis (col_rng);
    set (gca, 'YDir', 'Normal'); % To match orientation with station images
    set (gca, 'XDir', 'Reverse'); % To match orientation with station images
    %ylabel('South $\leftarrow$ m $\rightarrow$ North', 'interpreter', 'latex');
    %xlabel('East $\leftarrow$ l $\rightarrow$ West', 'interpreter', 'latex');
    
    subplot (233);
	imagesc (l, m, abs(squeeze(map_sky(ind,:,:,1)))); colorbar; caxis (col_rng);
    set (gca, 'YDir', 'Normal'); % To match orientation with station images
    set (gca, 'XDir', 'Reverse'); % To match orientation with station images
    
	% title ('XX');
    
    subplot (234);
	imagesc (l, m, abs(squeeze(map(ind,:,:,4)))); colorbar;	
    set (gca, 'YDir', 'Normal'); % To match orientation with station images
    set (gca, 'XDir', 'Reverse'); % To match orientation with station images
%     ylabel('South $\leftarrow$ m $\rightarrow$ North', 'interpreter', 'latex');
%     xlabel('East $\leftarrow$ l $\rightarrow$ West', 'interpreter', 'latex');
    
    subplot (235);
	imagesc (l, m, abs(squeeze(map_rfi(ind,:,:,4)))); colorbar;caxis (col_rng);
    set (gca, 'YDir', 'Normal'); % To match orientation with station images
    set (gca, 'XDir', 'Reverse'); % To match orientation with station images
%     ylabel('South $\leftarrow$ m $\rightarrow$ North', 'interpreter', 'latex');
%     xlabel('East $\leftarrow$ l $\rightarrow$ West', 'interpreter', 'latex');
    

	subplot (236);
	imagesc (l, m, abs(squeeze(map_sky(ind,:,:,4)))); colorbar;caxis (col_rng);
    set (gca, 'YDir', 'Normal'); % To match orientation with station images
    set (gca, 'XDir', 'Reverse'); % To match orientation with station images
%     ylabel('South $\leftarrow$ m $\rightarrow$ North', 'interpreter', 'latex');
%     xlabel('East $\leftarrow$ l $\rightarrow$ West', 'interpreter', 'latex');
    
	% title ('YY');
	mtit (sprintf ('Index: %d, %s', ind, datestr(mjdsec2datenum(tobs_mjdsec(ind)))), 'yoff', 0.25);
	pause;
end;
